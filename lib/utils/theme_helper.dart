import 'package:flutter/material.dart';
import 'package:jurni_test/utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData(PrefUtils.keyThemeData);

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {'primary': PrimaryColors()};

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {'primary': ColorSchemes.primaryColorScheme};

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.darkGrey,
          fontSize: AppFontSizes.subHeadingFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.darkGrey,
          fontSize: AppFontSizes.bodyFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.primaryBlack,
          fontSize: AppFontSizes.headingh1FontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.primaryBlack,
          fontSize: AppFontSizes.subHeadingFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.primaryBlack,
          fontSize: AppFontSizes.headingFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.primaryBlack,
          fontSize: AppFontSizes.subHeadingFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.bold,
        ),
        titleSmall: TextStyle(
          color: appTheme.darkGrey,
          fontSize: AppFontSizes.subHeadingFontSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF023876),
    primaryContainer: Color(0X90EEA437),

    // Error colors
    errorContainer: Color(0XFF494C5A),
    onError: Color(0XFF003770),

    // On colors(text colors)
    onPrimary: Color(0X82FFFFFF),
    onPrimaryContainer: Color(0X7E1B1F31),
  );
}

class AppFontSizes {
  static double headingBigFontSize = 30;
  static double headingh1FontSize = 24;
  static double headingFontSize = 18;
  static double bodyFontSize = 12;
  static double bodySmallFontSize = 10;
  static double subHeadingFontSize = 16;
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primaryColor => const Color(0XFF373423);

  Color get secondaryColor => const Color(0XFFEAFFF4);

  // Transparent
  Color get transparentColor => Colors.transparent;

  // Black
  Color get primaryBlack => const Color(0XFF373423);

  // White
  Color get white => const Color(0XFFFFFFFF);

  // Gray
  Color get lighterGrey => const Color(0XFFFCFCFC);

  Color get lightGrey => const Color(0XFFEEEEEE);

  Color get mediumGrey => const Color(0xFFE0E0E0);

  Color get darkGrey => const Color(0XFF646464);

  // Red
  Color get redColor => const Color(0XFFF12A2A);

  // Blue
  Color get nhsLoginBlueColor => const Color(0XFF005EB8);

  Color get primaryBlueColor => const Color(0XFF0EA9D4);

  Color get secondaryBlueColor => const Color(0XFFD4EDF4);

  // orange
  Color get primaryOrangeColor => const Color(0XFFB05805);

  Color get secondaryOrangeColor => const Color(0XFFFFEFE0);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
